require('dotenv').config();
const express = require('express');
const { ApolloServer, gql } = require('apollo-server-express');
const mysql = require('mysql2/promise');

// Create a MySQL connection pool
const pool = mysql.createPool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    ssl: {
        rejectUnauthorized: false // Adjust SSL settings if necessary
    },
});

// Function to create the testtable table
async function createTable() {
    const connection = await pool.getConnection();
    const createTableQuery = `
        CREATE TABLE IF NOT EXISTS testtable (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            email VARCHAR(100) NOT NULL,
            phone VARCHAR(15),
            houseno VARCHAR(10)
        );
    `;
    
    try {
        await connection.query(createTableQuery);
        console.log('✅ Test table created successfully!');
    } catch (error) {
        console.error('❌ Error creating test table:', error.message);
    } finally {
        connection.release();
    }
}

// Function to insert sample data into the testtable
async function insertSampleData() {
    const connection = await pool.getConnection();
    const sampleData = [
        { name: 'sam Doe', email: 'john@example.com', phone: '(123) 456-7890', houseno: '001' },
        { name: 'peter Smith', email: 'jane@example.com', phone: '(234) 567-8901', houseno: '002' },
        { name: 'Alice Johnson', email: 'alice@example.com', phone: '(345) 678-9012', houseno: '003' },
        { name: 'debo Brown', email: 'bob@example.com', phone: '(456) 789-0123', houseno: '004' },
        { name: 'jackie Davis', email: 'charlie@example.com', phone: '(567) 890-1234', houseno: '005' },
        { name: 'miriam Evans', email: 'diana@example.com', phone: '(678) 901-2345', houseno: '006' },
        { name: 'sap Green', email: 'edward@example.com', phone: '(789) 012-3456', houseno: '007' },
        { name: 'qwen White', email: 'fiona@example.com', phone: '(890) 123-4567', houseno: '008' },
        { name: 'soph Black', email: 'george@example.com', phone: '(901) 234-5678', houseno: '009' },
        { name: 'kenya Blue', email: 'hannah@example.com', phone: '(012) 345-6789', houseno: '010' },
        { name: 'jim Red', email: 'ian@example.com', phone: '(123) 456-7891', houseno: '011' },
    ];

    try {
        for (const record of sampleData) {
            const { name, email, phone, houseno } = record;
            const insertQuery = 'INSERT INTO testtable (name, email, phone, houseno) VALUES (?, ?, ?, ?)';
            await connection.query(insertQuery, [name, email, phone, houseno]);
        }
        console.log('✅ Sample data inserted successfully!');
    } catch (error) {
        console.error('❌ Error inserting sample data:', error.message);
    } finally {
        connection.release();
    }
}

// Test the database connection
async function testConnection() {
    try {
        const connection = await pool.getConnection();
        console.log('✅ Database connection successful!');
        connection.release();
    } catch (error) {
        console.error('❌ Database connection failed:', error.message);
    }
}

// Define the GraphQL schema
const typeDefs = gql`
    type TestTableRecord {
        id: ID!
        name: String!
        email: String!
        phone: String
        houseno: String
    }

    type Query {
        testtable: [TestTableRecord]
    }
`;

// Define the resolvers
const resolvers = {
    Query: {
        testtable: async () => {
            const connection = await pool.getConnection();
            const [rows] = await connection.query('SELECT * FROM testtable');
            connection.release();
            return rows;
        },
    },
};

// Create an Express application
const app = express();

// Create an Apollo Server instance
const server = new ApolloServer({ typeDefs, resolvers });

// Apply the Apollo GraphQL middleware to the Express application
server.start().then(() => {
    server.applyMiddleware({ app });

    // Start the server
    app.listen({ port: 4000 }, () =>
        console.log(`🚀 Server ready at http://localhost:4000${server.graphqlPath}`)
    );
});

// Call the functions to create the table, test the connection, and insert sample data
(async () => {
    await testConnection();
    await createTable();
    await insertSampleData();
})();
